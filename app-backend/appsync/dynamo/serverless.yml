service: serverless-graphql-appsync-dynamo

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-appsync-plugin

custom:
  stage: ${{opt:stage, 'dev'}}
  serviceStage: ${{self:service}}-${{self:custom.stage}}
  userInfoTemplate: ${{file(./mapping-templates/getUserInfo.yml)}}
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: Users
            sources: [seed-data/Users.json]
          - table: Tweets
            sources: [seed-data/Tweets.json]
  # appSync:
  #   # name:  # defaults to api
  #   # apiId # only required for update-appsync
  #   authenticationType: API_KEY # API_KEY is also supported
  #   # userPoolConfig:
  #   #   awsRegion: us-east-1 # required # region
  #   #   defaultAction: ALLOW
  #   #   userPoolId: us-east-1_xxxxxxxxx # replace this with your Cognito User Pool Id
  #   # region: # defaults to provider region
  #   # mappingTemplatesLocation: # defaults to mapping-templates
  #   mappingTemplates:
  #     - dataSource: Users
  #       type: Query
  #       field: getUserInfo
  #       request: "getUserInfo-request-mapping-template.txt"
  #       response: "getUserInfo-response-mapping-template.txt"
  #     - dataSource: Users
  #       type: Query
  #       field: meInfo
  #       request: "meInfo-request-mapping-template.txt"
  #       response: "meInfo-response-mapping-template.txt"
  #     - dataSource: Tweets
  #       type: User
  #       field: topTweet
  #       request: "topTweet-request-mapping-template.txt"
  #       response: "topTweet-response-mapping-template.txt"
  #     - dataSource: Tweets
  #       type: User
  #       field: tweets
  #       request: "tweets-request-mapping-template.txt"
  #       response: "tweets-response-mapping-template.txt"
  #     - dataSource: Tweets
  #       type: Mutation
  #       field: createTweet
  #       request: "createTweet-request-mapping-template.txt"
  #       response: "createTweet-response-mapping-template.txt"
  #     - dataSource: Tweets
  #       type: Mutation
  #       field: deleteTweet
  #       request: "deleteTweet-request-mapping-template.txt"
  #       response: "deleteTweet-response-mapping-template.txt"
  #     - dataSource: Tweets
  #       type: Mutation
  #       field: reTweet
  #       request: "reTweet-request-mapping-template.txt"
  #       response: "reTweet-response-mapping-template.txt"
  #     - dataSource: Tweets
  #       type: Mutation
  #       field: updateTweet
  #       request: "updateTweet-request-mapping-template.txt"
  #       response: "updateTweet-response-mapping-template.txt"
  #     - dataSource: Users
  #       type: Mutation
  #       field: updateUserInfo
  #       request: "updateUserInfo-request-mapping-template.txt"
  #       response: "updateUserInfo-response-mapping-template.txt"
  #   # schema: # defaults schema.graphql
  #   serviceRole: "AppSyncServiceRole"
  #   dataSources:
  #     - type: AMAZON_DYNAMODB
  #       name: Users
  #       description: 'Users table'
  #       config:
  #         tableName: 'Users'
  #         serviceRoleArn: "arn:aws:iam::${{self:custom.accountId}}:role/Dynamo-${{self:custom.appSync.serviceRole}}"
  #     - type: AMAZON_DYNAMODB
  #       name: Tweets
  #       description: 'Tweets table'
  #       config:
  #         tableName: 'Tweets'
  #         serviceRoleArn: "arn:aws:iam::${{self:custom.accountId}}:role/Dynamo-${{self:custom.appSync.serviceRole}}"

resources:
  Resources:
    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          -
            AttributeName: handle
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: handle
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: "${{self:custom.serviceStage}}-Users"
    # TweetsTable:
    #   Type: "AWS::DynamoDB::Table"
    #   Properties:
    #     KeySchema:
    #       -
    #         AttributeName: tweet_id
    #         KeyType: HASH
    #     AttributeDefinitions:
    #       -
    #         AttributeName: tweet_id
    #         AttributeType: S
    #       -
    #         AttributeName: handle
    #         AttributeType: S
    #       -
    #         AttributeName: retweet_count
    #         AttributeType: N
    #       -
    #         AttributeName: created_at
    #         AttributeType: S
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 10
    #       WriteCapacityUnits: 10
    #     TableName: "Tweets"
    #     GlobalSecondaryIndexes:
    #       -
    #         IndexName: top-index
    #         KeySchema:
    #           -
    #             AttributeName: handle
    #             KeyType: HASH
    #           -
    #             AttributeName: retweet_count
    #             KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL
    #         ProvisionedThroughput:
    #           ReadCapacityUnits: 50
    #           WriteCapacityUnits: 50
    #       -
    #         IndexName: tweet-index
    #         KeySchema:
    #           -
    #             AttributeName: handle
    #             KeyType: HASH
    #           -
    #             AttributeName: created_at
    #             KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL
    #         ProvisionedThroughput:
    #           ReadCapacityUnits: 50
    #           WriteCapacityUnits: 50
    GraphQLApi:
      Type: "AWS::AppSync::GraphQLApi"
      Properties:
        Name: "${{self:custom.serviceStage}}-api"
        AuthenticationType: API_KEY
    ApiKey:
      Type: "AWS::AppSync::ApiKey"
      DependsOn:
        - GraphQLApi
      Properties:
        ApiId: 
          "Fn::GetAtt": [ GraphQLApi, ApiId ]
        Expires: 1528056650
    Schema:
      Type: "AWS::AppSync::GraphQLSchema"
      DependsOn:
        - GraphQLApi
      Properties:
        ApiId:
          "Fn::GetAtt": [ GraphQLApi, ApiId ]
        Definition: |
          type Mutation {
            createTweet(
              tweet: String!,
              consumer_key: String,
              consumer_secret: String,
              access_token_key: String,
              access_token_secret: String,
              created_at: String!
            ): Tweet!

            deleteTweet(
              tweet_id: String!,
              consumer_key: String,
              consumer_secret: String,
              access_token_key: String,
              access_token_secret: String
            ): Tweet!

            reTweet(
              tweet_id: String!,
              consumer_key: String,
              consumer_secret: String,
              access_token_key: String,
              access_token_secret: String
            ): Tweet!

            updateTweet(tweet_id: String!, tweet: String!): Tweet!

            updateUserInfo(
              location: String!,
              description: String!,
              name: String!,
              followers_count: Int!,
              friends_count: Int!,
              favourites_count: Int!,
              following: [String!]!
            ): User!
          }

          type Query {
            meInfo(consumer_key: String, consumer_secret: String): User!
            getUserInfo(handle: String!, consumer_key: String, consumer_secret: String): [User]

            searchAllTweetsByKeyword(keyword: String!): TweetConnection
          }

          type Subscription {
            addTweet: Tweet
              @aws_subscribe(mutations: ["createTweet"])
          }

          type Tweet {
            tweet_id: String!
            tweet: String!
            retweeted: Boolean
            retweet_count: Int
            favorited: Boolean
            created_at: String!
          }

          type TweetConnection {
            items: [Tweet!]!
            nextToken: String
          }

          type User {
            name: String!
            handle: String!
            location: String!
            description: String!
            followers_count: Int!
            friends_count: Int!
            favourites_count: Int!
            following: [String!]!
            topTweet: Tweet
            tweets(limit: Int!, nextToken: String): TweetConnection

            searchTweetsByKeyword(keyword: String!): TweetConnection
          }

          schema {
            query: Query
            mutation: Mutation
            subscription: Subscription
          }
    DynamoServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "${{self:custom.serviceStage}}-Dynamo-ServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "${{self:custom.serviceStage}}-Dynamo-ServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "Fn::GetAtt": [ UsersTable, Arn ]
                    - 'Fn::Join':
                      - '/'
                      -
                        - "Fn::GetAtt": [ UsersTable, Arn ]
                        - '*'
                    # - "arn:aws:dynamodb:us-east-1:*:table/Tweets"
                    # - "arn:aws:dynamodb:us-east-1:*:table/Tweets/*"
    UsersDataSource:
      Type: "AWS::AppSync::DataSource"
      DependsOn:
        - GraphQLApi
        - DynamoServiceRole
        - UsersTable
      Properties:
        ApiId:
          "Fn::GetAtt": [ GraphQLApi, ApiId ]
        Name: "UserDataSource"
        Type: "AMAZON_DYNAMODB"
        ServiceRoleArn:
          "Fn::GetAtt": [ DynamoServiceRole, Arn ]
        DynamoDBConfig:
          TableName: "${{self:custom.serviceStage}}-Users"
          AwsRegion: us-east-1
    Resolver:
      Type: "AWS::AppSync::Resolver"
      DependsOn:
        - GraphQLApi
        - UsersDataSource
      Properties:
        ApiId:
          "Fn::GetAtt": [ GraphQLApi, ApiId ]
        TypeName: Query
        FieldName: getUserInfo
        DataSourceName: UserDataSource
        RequestMappingTemplate: |
          {
            "version" : "2017-02-28",
            "operation" : "Query",
            "query" : {
                "expression": "handle = :handle",
                "expressionValues" : {
                    ":handle" : {
                        "S" : "${context.arguments.handle}"
                    }
                }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($context.result.items)
